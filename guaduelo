#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pygame
from pygame.locals import *
import random 
from pprint import pprint

from lib.loader import Loader, BASE_DIR
from lib.board import Card, Board
from lib.ai import AIPlayer
from lib.gameboard import GameBoard
from lib.robotmouse import RobotMouse
from lib.sidepanel import SidePanel

from lib.vec2d import vec2d

import os

class Star(object):
    def __init__(self,img,pos):
        self.img = img
        x,y = pos
        self.pos = vec2d(float(x),float(y))
        self.speed = vec2d(1.0,0.0)
        self.speed.length = float(random.randint(1,3))
        self.speed.angle = random.randint(0,359)
        self.g = vec2d(0.0,0.1)
        
        self.count = 50
        
    def draw(self,dest):
        if self.count > 0:
            self.count -= 1
            dest.blit(self.img,self.pos.get_int_pos())
            self.pos+=self.speed
            self.speed+=self.g
        
class StarBurstAnim(object):
    
    def __init__(self):
        loader = Loader()
        self.stars = []
        for i in range(1,6):
            self.stars.append(loader.load_image("star%d.png" % i, True))
        self.anims = []

    def stop(self):
        self.anims = []

    def anim_done(self):
        if len(self.anims):
            return False
        return True

    def add(self,pos):
        for i in range(20):
            self.anims.append(Star(random.choice(self.stars),pos))
        
    def draw(self,dest):
        dels=[]
        for s in list(self.anims):
            if s.count == 0:
                dels.append(s)
            else:
                s.draw(dest)
        
        for d in dels:
            self.anims.remove(d)

    
class StarDustAnim(object):
    def __init__(self):
        loader = Loader()
        self.stars = []
        for i in range(1,6):
            self.stars.append(loader.load_image("star%d.png" % i, True))
        self.anims = []
        
    def anim_done(self):
        if len(self.anims):
            return False
        return True
        
    def add(self,pos):
        self.anims.append([40,pos])
    
    def draw(self,dest):
        dels=[]
        for a in list(self.anims):
            if a[0] == 0:
                dels.append(a)
            else:
                a[0]-=1
                x,y = a[1]
                for i in range(6):
                    dest.blit(random.choice(self.stars),(x+random.randint(-30,30)-10, y+random.randint(-30,30)-10))
                                   
        for d in dels:
            self.anims.remove(d)

class Award(pygame.sprite.Sprite):
    """This class represents award image animation"""

    def __init__(self, award_id):
        pygame.sprite.Sprite.__init__(self)
        if award_id != None:
            self.award_id = award_id
            self.image, self.rect = self.load_image(award_id, -1)
            screen = pygame.display.get_surface()
            self.original = self.image
            self.achieved = True
        else:
            self.achieved = False
        self.zoom_amount = 0
        self.rotation_amount = 0

    def update(self):
        if self.achieved:
            self.zoom_amount += 0.05
            self.rotation_amount += 36
            self.zoom()
        else:
            print 'do nothing!'

    def zoom(self):
        self.image, self.rect = self.load_image(self.award_id, -1)
        self.rect.midtop = (320, 30)

        if self.zoom_amount >= 1.6:
            self.achieved = False
            pygame.time.wait(8000)
            self.image = self.original
            self.zoom_amount = 0
            self.rotation_amount = 0
        else:
            zoom = pygame.transform.rotozoom
            self.image = zoom(self.image, 0, self.zoom_amount)

    def load_image(self, award_id, colorkey=None):
        if award_id == None: award_id = None 
        fullname = os.path.join(BASE_DIR, 'img', str(award_id) + '_award.png')
        try:
            image = pygame.image.load(fullname)
        except pygame.error:
            print ('Cannot load image:', fullname)
            #raise SystemExit(str(geterror()))
        image = image.convert()
        if colorkey is not None:
            if colorkey is -1:
                colorkey = image.get_at((0,0))
            image.set_colorkey(colorkey, RLEACCEL)
        return image, image.get_rect()

    
class Guaduelo(object):
    def __init__(self):
        self.screen = pygame.display.set_mode((800, 600),1)
        # changing to fullscreen at startup
        #pygame.display.toggle_fullscreen()

        pygame.display.set_caption("Guaduelo v0.1")

        self.loader = Loader()
                        
        self.game_board = GameBoard()
        self.side_panel = SidePanel()
        self.robot_mouse = RobotMouse() 
        self.ai_player = AIPlayer(3)
        
        self.side_panel.ai_level = self.ai_player.level
        self.side_panel.update_stats()
        self.pair_snd = self.loader.load_sound("pair.wav")
        self.win_snd = self.loader.load_sound("win.wav")
        self.win_snd.set_volume(0.5)
        self.boom_snd = self.loader.load_sound("boom.wav")
        self.boom_snd.set_volume(0.3)
        self.applause_snd = self.loader.load_sound("applause.wav")
        self.applause_snd.set_volume(0.5)
 
        self.stardust = StarDustAnim()
        self.starburst = StarBurstAnim()
              
    def setup_new_game(self):
        self.board = Board()
        self.ai_player.set_board(self.board)
        self.game_board.set_board(self.board.get_cards())

        self.side_panel.player_score = 0
        self.side_panel.robot_score = 0
        self.side_panel.update_score()

    def select_card(self,card):
        self.board.select_card(card)
        self.game_board.touch_card(card)

    def main_loop(self): 
        clock = pygame.time.Clock()

        SETUP_NEW_GAME = 0
        PLAYER_SELECT_FIRST = 10
        PLAYER_SELECT_SECOND = 11
        PLAYER_DONE = 12
        PLAYER2_SELECT_FIRST = 20
        PLAYER2_SELECT_SECOND = 30
        PLAYER2_DONE = 40
        GAME_OVER = 98
        GAME_OVER_WAIT = 99
        START_SCREEN = 100
 
        DELAY = 40
        state_delay = 0

        AWARDS = (0, 1, 2, 3)
 
        state = START_SCREEN
 
        next_player = 0
 
        starburst_count = 0

        ctrl_pushed = False 


        award = Award(None)
        awardlist = [award]
        awardsprites = pygame.sprite.RenderPlain()


        while 1:
            clock.tick(30)

            mouse_clicked = False
            mouse_pos = (0,0)
            for event in pygame.event.get():
                if event.type == QUIT:
                    return
                elif event.type == KEYUP and event.key == K_LCTRL:
                    ctrl_pushed = False
                elif event.type == KEYDOWN:
                    if event.key in [K_ESCAPE, K_q]:
                        return
                    if event.key == K_LCTRL:
                        ctrl_pushed = True
                    if ctrl_pushed:
                        if event.type == KEYDOWN and event.key == K_r:
                            self.game_board.goto_game()
                            self.setup_new_game()
                            state = SETUP_NEW_GAME
                            self.starburst.stop()
                            ctrl_pushed = False

                    # John's debug lines
                    #elif event.key == K_F1:
                    #    self.side_panel.player_score =18
                    #    self.side_panel.robot_score = 0
                    #    state = GAME_OVER 
                    #elif event.key == K_F2:
                    #    self.side_panel.player_score = 0
                    #    self.side_panel.robot_score = 18
                    #    state = GAME_OVER 
                    #elif event.key == K_F3:
                    #    self.side_panel.player_score = 9
                    #    self.side_panel.robot_score = 9
                    #    state = GAME_OVER

                    # Toggle fullscreen
                    elif event.key == K_F11:
                        pygame.display.toggle_fullscreen()
 
                elif event.type == MOUSEBUTTONDOWN:
                    # John's debug lines
                    #if event.button == 3:
                    #    self.starburst.add(event.pos)
                    if event.button == 1:
                        mouse_clicked = True
                        mouse_pos = event.pos
                
            # === STATE HANDLER ===

            if state_delay > 0:
                state_delay -= 1
            else:
                # --- NEW GAME ---
                if state == START_SCREEN and mouse_clicked:
                    state = SETUP_NEW_GAME
                    self.setup_new_game()
                    self.game_board.goto_game()
                elif state == SETUP_NEW_GAME:
                    if self.side_panel.x > 600:
                        self.side_panel.x-=10
                    else:
                        if next_player == 1:
                            self.side_panel.show_robot(False,0,0)
                            state = PLAYER2_SELECT_FIRST
                            next_player = 0
                        else:
                            self.side_panel.show_player(False)
                            state = PLAYER_SELECT_FIRST
                            next_player = 1
                # Check if need to reset award state
                elif not award.achieved and len(awardlist) != 0:
                    awardlist.pop()
                # --- PLAYER STATES ---
                elif state == PLAYER_SELECT_FIRST and \
                    self.stardust.anim_done() and \
                    self.game_board.is_init_done() and \
                    mouse_clicked:

                    c = self.game_board.location_to_card(mouse_pos)
                    if c and not c.selected:
                        self.select_card(c)
                        state = PLAYER_SELECT_SECOND
                elif state == PLAYER_SELECT_SECOND and mouse_clicked:
                    c = self.game_board.location_to_card(mouse_pos)
                    if c and not c.selected:
                        self.select_card(c)
                        state = PLAYER_DONE
                        state_delay = DELAY
                elif state == PLAYER_DONE:
                    pair = self.board.end_of_turn()
                    if pair:
                        if pair[0].type in AWARDS:
                            self.applause_snd.play()
                            # here, show the award!
                            awardsprites.remove(award)
                            award = Award(pair[0].type)
                            awardlist.append(award)
                            awardsprites.add(award)
                            award.achieve = True
                        else:
                            self.pair_snd.play()
                            for p in pair:
                                self.stardust.add(self.game_board.card_to_location(p))
                        self.side_panel.player_score+=1
                        self.side_panel.update_score()
                        state = PLAYER_SELECT_FIRST
                        #if p.type in AWARDS:
                        #    self.applause_snd.play()
                        #    # here, show the award!
                        #    award = Award(p.type)
                        #    awardlist.append(award)
                        #    awardsprites.add(award)
                        #    award.achieve = True
                        #else:
                        #    self.pair_snd.play()
                    else:
                        state = PLAYER2_SELECT_FIRST
                        self.side_panel.show_robot(False,0,0)
                    if self.board.is_game_over():
                        state = GAME_OVER

                # --- PLAYER2 STATES ---
                elif state == PLAYER2_SELECT_FIRST and self.game_board.is_init_done():
                    c = self.game_board.location_to_card(mouse_pos)
                    if c and not c.selected:
                        self.select_card(c)
                        state = PLAYER2_SELECT_SECOND
                elif state == PLAYER2_SELECT_SECOND and mouse_clicked:
                    c = self.game_board.location_to_card(mouse_pos)
                    if c and not c.selected:
                        self.select_card(c)
                        state = PLAYER2_DONE
                        state_delay = DELAY
                elif state == PLAYER2_DONE:
                    pair = self.board.end_of_turn()
                    if pair:
                        if pair[0].type in AWARDS:
                            self.applause_snd.play()
                            # here, show the award!
                            awardsprites.remove(award)
                            award = Award(pair[0].type)
                            awardlist.append(award)
                            awardsprites.add(award)
                            award.achieve = True
                        else:
                            self.pair_snd.play()
                            for p in pair:
                                self.stardust.add(self.game_board.card_to_location(p))
                        self.side_panel.robot_score+=1
                        self.side_panel.update_score()
                        state = PLAYER2_SELECT_FIRST
                        #if p.type in AWARDS:
                        #    self.applause_snd.play()
                        #    award = Award(p.type)
                        #    awardlist.append(award)
                        #    awardsprites.add(award)
                        #    award.achieve = True
                        #else:
                        #    self.pair_snd.play() 
                    else:
                        state = PLAYER_SELECT_FIRST
                        self.side_panel.show_player(False)
                    if self.board.is_game_over():
                        state = GAME_OVER

                # At the moment, we will keep robot states code commented
                ## --- ROBOT STATES ---
                #elif state == ROBOT_SELECT_FIRST and self.game_board.is_init_done():
                #    c = self.ai_player.select_first_card()
                #    self.side_panel.show_robot(False,self.ai_player.first,0)                    
                #    self.robot_mouse.goto(self.game_board.card_to_location(c))
                #    state = ROBOT_SELECT_FIRST_WAIT
                #elif state == ROBOT_SELECT_FIRST_WAIT and not self.robot_mouse.is_moving():
                #    self.select_card(self.ai_player.last_selected)
                #    state = ROBOT_SELECT_SECOND
                #elif state == ROBOT_SELECT_SECOND:
                #    c = self.ai_player.select_second_card()
                #    self.side_panel.show_robot(False,self.ai_player.first,self.ai_player.second)                    
                #    self.robot_mouse.goto(self.game_board.card_to_location(c))
                #    state = ROBOT_SELECT_SECOND_WAIT
                #elif state == ROBOT_SELECT_SECOND_WAIT and not self.robot_mouse.is_moving():
                #    self.robot_mouse.hide()           
                #    self.select_card(self.ai_player.last_selected)
                #    state = ROBOT_DONE
                #    state_delay = DELAY
                #elif state == ROBOT_DONE:           
                #    pair = self.board.end_of_turn() 
                #    if pair:
                #        for p in pair:
                #            self.stardust.add(self.game_board.card_to_location(p))
                #        self.pair_snd.play() 
                #        self.side_panel.robot_score+=1
                #        self.side_panel.update_score()
                #        state = ROBOT_SELECT_FIRST 
                #        state_delay = DELAY
                #    else:
                #        self.side_panel.show_player(False)
                #        state = PLAYER_SELECT_FIRST 
                #    if self.board.is_game_over():
                #        state = GAME_OVER
                
                # --- GAME OVER ---
                elif state == GAME_OVER and self.stardust.anim_done():         
                    r = self.side_panel.show_winner()
                    self.win_snd.play()
                    self.side_panel.games_stat+=1
                    if r == 1:
                        self.side_panel.player_stat+=1
                        self.ai_player.you_lose()
                    elif r == 2:
                        self.side_panel.robot_stat+=1
                        self.ai_player.you_win()
                    self.side_panel.ai_level = self.ai_player.level
                    self.side_panel.update_stats()
                    self.game_board.goto_gameover(r)
                    state = GAME_OVER_WAIT
                    starburst_count = 40
                    starburst_delay = 0
                    # Award animation will not been shown
                    # by setting achieved to False
                    award.achieved = False
                elif state == GAME_OVER_WAIT:
                    if mouse_clicked:         
                        self.game_board.goto_game()
                        self.setup_new_game()
                        state = SETUP_NEW_GAME
                        self.starburst.stop()
                    else:
                        if starburst_count:
                            if starburst_delay == 0:
                                starburst_count-=1
                                self.boom_snd.play()
                                x = random.randint(50,550)
                                y = random.randint(50,550)
                                self.starburst.add((x,y))
                                starburst_delay = random.randint(15,30)
                            else:
                                starburst_delay -= 1

            # === DRAWING ===

            self.game_board.draw(self.screen)
            
            if state != START_SCREEN:
                self.side_panel.draw(self.screen)                            
                self.robot_mouse.draw(self.screen)
            
            self.stardust.draw(self.screen)
            self.starburst.draw(self.screen)

            if award.achieved:
                awardsprites.update()
                awardsprites.draw(self.screen)

            
            pygame.display.flip()            

def main():
    try:
        import psyco
        psyco.full()
    except ImportError:
        pass

    pygame.mixer.pre_init(44100,-16,2, 1024)
     
    pygame.init()

    g = Guaduelo()
    g.main_loop()
 
if __name__ == '__main__': 
    main()
